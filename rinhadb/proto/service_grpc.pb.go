// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RinhaDBClient is the client API for RinhaDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RinhaDBClient interface {
	NewPerson(ctx context.Context, opts ...grpc.CallOption) (RinhaDB_NewPersonClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (RinhaDB_SearchClient, error)
}

type rinhaDBClient struct {
	cc grpc.ClientConnInterface
}

func NewRinhaDBClient(cc grpc.ClientConnInterface) RinhaDBClient {
	return &rinhaDBClient{cc}
}

func (c *rinhaDBClient) NewPerson(ctx context.Context, opts ...grpc.CallOption) (RinhaDB_NewPersonClient, error) {
	stream, err := c.cc.NewStream(ctx, &RinhaDB_ServiceDesc.Streams[0], "/RinhaDB/NewPerson", opts...)
	if err != nil {
		return nil, err
	}
	x := &rinhaDBNewPersonClient{stream}
	return x, nil
}

type RinhaDB_NewPersonClient interface {
	Send(*Pessoa) error
	Recv() (*Pessoa, error)
	grpc.ClientStream
}

type rinhaDBNewPersonClient struct {
	grpc.ClientStream
}

func (x *rinhaDBNewPersonClient) Send(m *Pessoa) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rinhaDBNewPersonClient) Recv() (*Pessoa, error) {
	m := new(Pessoa)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rinhaDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/RinhaDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinhaDBClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (RinhaDB_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &RinhaDB_ServiceDesc.Streams[1], "/RinhaDB/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &rinhaDBSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RinhaDB_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type rinhaDBSearchClient struct {
	grpc.ClientStream
}

func (x *rinhaDBSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RinhaDBServer is the server API for RinhaDB service.
// All implementations must embed UnimplementedRinhaDBServer
// for forward compatibility
type RinhaDBServer interface {
	NewPerson(RinhaDB_NewPersonServer) error
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Search(*SearchRequest, RinhaDB_SearchServer) error
	mustEmbedUnimplementedRinhaDBServer()
}

// UnimplementedRinhaDBServer must be embedded to have forward compatible implementations.
type UnimplementedRinhaDBServer struct {
}

func (UnimplementedRinhaDBServer) NewPerson(RinhaDB_NewPersonServer) error {
	return status.Errorf(codes.Unimplemented, "method NewPerson not implemented")
}
func (UnimplementedRinhaDBServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRinhaDBServer) Search(*SearchRequest, RinhaDB_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedRinhaDBServer) mustEmbedUnimplementedRinhaDBServer() {}

// UnsafeRinhaDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RinhaDBServer will
// result in compilation errors.
type UnsafeRinhaDBServer interface {
	mustEmbedUnimplementedRinhaDBServer()
}

func RegisterRinhaDBServer(s grpc.ServiceRegistrar, srv RinhaDBServer) {
	s.RegisterService(&RinhaDB_ServiceDesc, srv)
}

func _RinhaDB_NewPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RinhaDBServer).NewPerson(&rinhaDBNewPersonServer{stream})
}

type RinhaDB_NewPersonServer interface {
	Send(*Pessoa) error
	Recv() (*Pessoa, error)
	grpc.ServerStream
}

type rinhaDBNewPersonServer struct {
	grpc.ServerStream
}

func (x *rinhaDBNewPersonServer) Send(m *Pessoa) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rinhaDBNewPersonServer) Recv() (*Pessoa, error) {
	m := new(Pessoa)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RinhaDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RinhaDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RinhaDB_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RinhaDBServer).Search(m, &rinhaDBSearchServer{stream})
}

type RinhaDB_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type rinhaDBSearchServer struct {
	grpc.ServerStream
}

func (x *rinhaDBSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RinhaDB_ServiceDesc is the grpc.ServiceDesc for RinhaDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RinhaDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RinhaDB",
	HandlerType: (*RinhaDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RinhaDB_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewPerson",
			Handler:       _RinhaDB_NewPerson_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _RinhaDB_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
